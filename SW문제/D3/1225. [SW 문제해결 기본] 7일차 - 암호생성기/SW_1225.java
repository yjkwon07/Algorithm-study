package study_day1;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;


/*
 다음 주어진 조건에 따라 n개의 수를 처리하면 8자리의 암호를 생성할 수 있다.

- 8개의 숫자를 입력 받는다.

- 첫 번째 숫자를 1 감소한 뒤, 맨 뒤로 보낸다. 

다음 첫 번째 수는 2 감소한 뒤 맨 뒤로, 그 다음 첫 번째 수는 3을 감소하고 맨 뒤로, 그 다음 수는 4, 그 다음 수는 5를 감소한다.

이와 같은 작업을 한 사이클이라 한다.

- 숫자가 감소할 때 0보다 작아지는 경우 0으로 유지되며, 프로그램은 종료된다. 이 때의 8자리의 숫자 값이 암호가 된다.

[제약 사항]

주어지는 각 수는 integer 범위를 넘지 않는다.

마지막 암호 배열은 모두 한 자리 수로 구성되어 있다.
 
[입력]

각 테스트 케이스의 첫 줄에는 테스트 케이스의 번호가 주어지고, 그 다음 줄에는 8개의 데이터가 주어진다.
 
[출력]

#부호와 함께 테스트케이스의 번호를 출력하고, 공백 문자 후 테스트 케이스의 답을 출력한다.
 */



public class SW_1225{
	public static void main(String[] args) throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		Queue<Integer> qu = new LinkedList<>();
		for(int count=1; count<=10; count++) {
			bf.readLine();
			String pre_array[] = bf.readLine().split(" ");
			for(int x=0; x<pre_array.length; x++) {
//				System.out.println("queue: "+Integer.parseInt(pre_array[x]));
				qu.offer(Integer.parseInt(pre_array[x]));
			}
			
			int x = -1;
			int dis =1; 
//			int loop_count =1;
			while(x!=0) {
				int number = qu.poll();
//				System.out.println("dis: "+dis);
				x = number-dis;
				
				if (x<0) {
					qu.offer(0);
					break;
				}
				else if(dis == 5) {
					qu.offer(x);
					dis=1;
				}
				
				else {
					qu.offer(x);
					dis++;
				}
				
			}
			System.out.print("#"+count);
			
			while(!qu.isEmpty())
				System.out.print(" "+qu.poll());
			System.out.println();
		}
	}
}
